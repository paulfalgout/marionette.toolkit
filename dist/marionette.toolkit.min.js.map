{"version":3,"sources":["/source/src/mixins/state.js","/source/src/mixins/child-apps.js","/source/src/mixins/event-listeners.js","/source/src/app.js","/source/src/component.js","/source/src/marionette.toolkit.js"],"names":["ClassOptions","StateMixin","StateModel","Backbone","Model","initState","options","arguments","length","undefined","this","_initState","delegateStateEvents","mergeOptions","_removeEventHandlers","_getStateModel","_stateModel","state","_setEventHandlers","undelegateStateEvents","bindEvents","_","result","unbindEvents","on","_destroyState","stopListening","off","prototype","isFunction","call","Marionette","Error","name","message","setState","set","apply","resetStateDefaults","defaults","getState","attr","get","ChildAppsMixin","_initChildApps","_childApps","childApps","addChildApps","_initListeners","start","_startChildApps","before:stop","_stopChildApps","before:destroy","_destroyChildApps","each","childApp","stop","startChildApp","appName","getChildApp","stopChildApp","destroy","_buildAppFromObject","appConfig","AppClass","omit","buildApp","_buildApp","isObject","extend","childAppOptions","_ensureAppIsUnique","bind","addChildApp","_name","partial","_removeChildApp","isRunning","getName","getChildApps","clone","removeChildApps","removeChildApp","preventDestroy","EventListenersMixin","_stopRunningEvents","_runningEvents","args","_stopRunningListeners","_runningListeningTo","_isRunning","push","Object","listenTo","listenToOnce","App","Application","startAfterInitialized","startWithParent","stopWithParent","constructor","_ensureAppIsIntact","_isDestroyed","isRestarting","_isRestarting","region","setRegion","view","setView","triggerMethod","triggerStart","restart","attributes","_view","_region","getRegion","regionName","getView","currentView","showView","_getRegion","_len","Array","_key","show","concat","showChildView","_getView","_len2","_key2","getChildView","Component","ViewClass","View","viewEventPrefix","viewOptions","_shouldDestroy","showIn","_isShown","renderView","_destroy","_getViewClass","mixinOptions","buildView","_proxyViewEvents","prefix","toArray","rootEvent","splice","_emptyRegion","empty","previousToolkit","Toolkit","noConflict","MixinState","classDefinition","_StateMixin","VERSION"],"mappings":"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","file":"marionette.toolkit.min.js","sourcesContent":["import _ from 'underscore';\nimport Backbone from 'backbone';\nimport Marionette from 'backbone.marionette';\n\nconst ClassOptions = [\n  'StateModel',\n  'stateEvents'\n];\n\n /**\n * This provides methods used for keeping state using a Backbone.Model. It's meant to\n * be used with either a Marionette.Object or Backbone.View.\n *\n * @mixin\n */\nexport default {\n\n  /**\n   * The model class for _stateModel.\n   * @type {Backbone.Model}\n   * @default Backbone.Model\n   */\n  StateModel: Backbone.Model,\n\n  /**\n   * @public\n   * @method initState\n   * @param {Object} [options] - Settings for the StateMixin.\n   * @param {Object} [options.stateEvents] - Event hash bound from _stateModel to StateMixin.\n   * @param {Backbone.Model} [options.StateModel] - Model class for _stateModel.\n   */\n  initState(options = {}) {\n    this._initState(options);\n    this.delegateStateEvents();\n  },\n\n  /**\n   * @private\n   * @method _initState\n   * @param {Object} [options] - Settings for the StateMixin.\n   */\n  _initState(options) {\n    // Make defaults available to this\n    this.mergeOptions(options, ClassOptions);\n\n    // Remove event handlers from previous state\n    this._removeEventHandlers();\n\n    const StateModel = this._getStateModel(options);\n\n    this._stateModel = new StateModel(options.state);\n\n    this._setEventHandlers();\n\n    return this;\n  },\n\n  /**\n   * Bind events from the _stateModel defined in stateEvents hash\n   *\n   * @public\n   * @method delegateStateEvents\n   */\n  delegateStateEvents() {\n    this.undelegateStateEvents();\n    this.bindEvents(this._stateModel, _.result(this, 'stateEvents'));\n\n    return this;\n  },\n\n  /**\n   * Unbind all entity events on _stateModel\n   *\n   * @public\n   * @method undelegateStateEvents\n   */\n  undelegateStateEvents() {\n    this.unbindEvents(this._stateModel);\n\n    return this;\n  },\n\n  /**\n   * Setup destroy event handle\n   *\n   * @private\n   * @method _setEventHandlers\n   */\n  _setEventHandlers() {\n    this.on('destroy', this._destroyState);\n  },\n\n  /**\n   * Clean up destroy event handler, remove any listeners on _stateModel\n   *\n   * @private\n   * @method _removeEventHandlers\n   */\n  _removeEventHandlers() {\n    if(!this._stateModel) return;\n\n    this.undelegateStateEvents();\n    this._stateModel.stopListening();\n    this.off('destroy', this._destroyState);\n  },\n\n\n  /**\n   * Get the StateMixin StateModel class.\n   * Checks if the `StateModel` is a model class (the common case)\n   * Then check if it's a function (which we assume that returns a model class)\n   *\n   * @private\n   * @method _getStateModel\n   * @param {Object} [options] - Options that can be used to determine the StateModel.\n   * @returns {Backbone.Model}\n   */\n  _getStateModel(options) {\n    if(this.StateModel.prototype instanceof Backbone.Model || this.StateModel === Backbone.Model) {\n      return this.StateModel;\n    } else if(_.isFunction(this.StateModel)) {\n      return this.StateModel.call(this, options);\n    }\n\n    throw new Marionette.Error({\n      name: 'InvalidStateModelError',\n      message: '\"StateModel\" must be a model class or a function that returns a model class'\n    });\n  },\n\n  /**\n   * Set a property on the _stateModel.\n   *\n   * @public\n   * @method setState\n   * @param {String|Object} key - Attribute name or Hash of any number of key value pairs.\n   * @param {*} [value] - Attribute value if key is String, replaces options param otherwise.\n   * @param {Object} [options] - Backbone.Model options.\n   * @returns {Backbone.Model} - The _stateModel\n   */\n  setState() {\n    return this._stateModel.set.apply(this._stateModel, arguments);\n  },\n\n\n  /**\n   *  Reset _stateModel to defined defaults\n   *\n   * @public\n   * @method resetStateDefaults\n   * @param {Object} [newState] - Hash of any number of key value pairs.\n   * @returns {Backbone.Model|*} - The _stateModel or the attribute value of the _stateModel\n   */\n  resetStateDefaults() {\n    const defaults = _.result(this._stateModel, 'defaults');\n\n    return this._stateModel.set(defaults);\n  },\n\n  /**\n   * Get a property from the _stateModel, or return the _stateModel\n   *\n   * @public\n   * @method getState\n   * @param {String} [attr] - Attribute name of stateModel.\n   * @returns {Backbone.Model|*} - The _stateModel or the attribute value of the _stateModel\n   */\n  getState(attr) {\n    if(!attr) {\n      return this._stateModel;\n    }\n\n    return this._stateModel.get.apply(this._stateModel, arguments);\n  },\n\n  /**\n   * Clean up any listeners on the _stateModel.\n   *\n   * @private\n   * @method _destroyState\n   */\n  _destroyState() {\n    this._stateModel.stopListening();\n  }\n};\n","import _ from 'underscore';\nimport Marionette from 'backbone.marionette';\n\nconst ClassOptions = [\n  'childApps',\n  'childAppOptions'\n];\n\n /**\n * This provides methods used for \"App Manager\" functionality - the adding and removing child `App`s. It's not meant to\n * be used directly.\n *\n * @mixin\n */\nexport default {\n\n  /**\n   * @private\n   * @method _initChildApps\n   * @constructs ChildApps\n   * @param {Object} [options] - Settings for the ChildApps.\n   * @param {Object} [options.childApps] - Hash for setting up child apps.\n   * @param {Object} [options.childAppOptions] - Hash of options passed to every child app.\n   *\n   * ```js\n   * childApps: {\n   *   appName: {\n   *     AppClass: MyChildAppClass,\n   *     fooOption: true,\n   *     startWithParent: true\n   *   },\n   *   barApp: MyOtherChildAppClass\n   * }\n   * ```\n   */\n  _initChildApps(options = {}) {\n    this._childApps = {};\n\n    this.mergeOptions(options, ClassOptions);\n\n    let childApps = this.childApps;\n\n    if(childApps) {\n      if(_.isFunction(childApps)) {\n        childApps = childApps.call(this, options);\n      }\n\n      this.addChildApps(childApps);\n    }\n\n    this._initListeners();\n  },\n\n  /**\n   * The child apps should be handled while the app is running;\n   * After start, before stop, and before destroy.\n   *\n   * @private\n   * @method _initListeners\n   */\n  _initListeners() {\n    this.on({\n      'start': this._startChildApps,\n      'before:stop': this._stopChildApps,\n      'before:destroy': this._destroyChildApps\n    });\n  },\n\n  /**\n   * Starts `childApps` if allowed by child\n   *\n   * @private\n   * @method _startChildApps\n   */\n  _startChildApps() {\n    _.each(this._childApps, function(childApp) {\n      if(_.result(childApp, 'startWithParent')) {\n        childApp.start();\n      }\n    });\n  },\n\n  /**\n   * Stops `childApps` if allowed by child\n   *\n   * @private\n   * @method _stopChildApps\n   */\n  _stopChildApps() {\n    _.each(this._childApps, function(childApp) {\n      if(_.result(childApp, 'stopWithParent')) {\n        childApp.stop();\n      }\n    });\n  },\n\n  /**\n   * Starts `childApp`\n   *\n   * @param {String} appName - Name of childApp to start\n   * @param {Object} options - Start options for app\n   * @public\n   * @method startChildApp\n   */\n  startChildApp(appName, options) {\n    return this.getChildApp(appName).start(options);\n  },\n\n  /**\n   * Stops `childApp`\n   *\n   * @param {String} appName - Name of childApp to stop\n   * @public\n   * @method stopChildApp\n   */\n  stopChildApp(appName) {\n    return this.getChildApp(appName).stop();\n  },\n\n  /**\n   * Destroys `childApps` if allowed by child\n   *\n   * @private\n   * @method _destroyChildApps\n   */\n  _destroyChildApps() {\n    _.each(this._childApps, function(childApp) {\n      if(!_.result(childApp, 'preventDestroy')) {\n        childApp.destroy();\n      }\n    });\n  },\n\n  /**\n   * Internal helper to instantiate and `App` from on `Object`\n   *\n   * @private\n   * @method _buildAppFromObject\n   * @param {Object} appConfig - `AppClass` and any other option for the `App`\n   * @returns {App}\n   */\n  _buildAppFromObject(appConfig) {\n    const AppClass = appConfig.AppClass;\n    const options = _.omit(appConfig, 'AppClass');\n\n    return this.buildApp(AppClass, options);\n  },\n\n  /**\n   * Helper for building an App and return it\n   *\n   * @private\n   * @method _buildApp\n   * @param {App} AppClass - An App Class\n   * @param {Object} AppClass - Optionally passed as an appConfig Object\n   * @param {Object} [options] - options for the AppClass\n   * @returns {App}\n   */\n  _buildApp(AppClass, options) {\n    if(_.isFunction(AppClass)) {\n      return this.buildApp(AppClass, options);\n    }\n    if(_.isObject(AppClass)) {\n      return this._buildAppFromObject(AppClass);\n    }\n  },\n\n  /**\n   * Build an App and return it\n   * Override for dynamic App building\n   *\n   * @public\n   * @method buildApp\n   * @param {App} [AppClass] - An App Class\n   * @param {Object} [options] - options for the AppClass\n   * @returns {App}\n   */\n  buildApp(AppClass, options) {\n    // options on childApp definition supersede childAppOptions\n    options = _.extend({}, this.childAppOptions, options);\n\n    return new AppClass(options);\n  },\n\n  /**\n   * Internal helper to verify `appName` is unique and not in use\n   *\n   * @private\n   * @method _ensureAppIsUnique\n   * @param {String} appName - Name of app to test\n   * @throws DuplicateChildAppError - Thrown if `App` already has an `appName` registered\n   */\n  _ensureAppIsUnique(appName) {\n    if(this._childApps[appName]) {\n      throw new Marionette.Error({\n        name: 'DuplicateChildAppError',\n        message: `A child App with name \"${ appName }\" has already been added.`\n      });\n    }\n  },\n\n  /**\n   * Add child `App`s to this `App`\n   *\n   * @public\n   * @method addChildApps\n   * @param {Object} childApps - Hash of names and `AppClass` or `appConfig`\n   */\n  addChildApps(childApps) {\n    _.each(childApps, _.bind(function(childApp, appName) {\n      this.addChildApp(appName, childApp);\n    }, this));\n  },\n\n  /**\n   * Build's childApp and registers it with this App\n   * Starts the childApp, if this app is running and child is `startWithParent`\n   *\n   * @public\n   * @method addChildApp\n   * @param {String} appName - Name of App to register\n   * @param {App} AppClass - An App Class\n   * @param {Object} AppClass - Optionally passed as an appConfig Object\n   * @param {Object} [options] - options for the AppClass\n   * @throws AddChildAppError - Thrown if no childApp could be built from params\n   * @returns {App}\n   */\n  addChildApp(appName, AppClass, options) {\n    this._ensureAppIsUnique(appName);\n\n    const childApp = this._buildApp(AppClass, options);\n\n    if(!childApp) {\n      throw new Marionette.Error({\n        name: 'AddChildAppError',\n        message: 'App build failed.  Incorrect configuration.'\n      });\n    }\n\n    childApp._name = appName;\n\n    this._childApps[appName] = childApp;\n\n    // When the app is destroyed remove the cached app.\n    childApp.on('destroy', _.partial(this._removeChildApp, appName), this);\n\n    if(this.isRunning() && _.result(childApp, 'startWithParent')) {\n      childApp.start();\n    }\n\n    return childApp;\n  },\n\n  /**\n   * Returns registered child `App`s name\n   *\n   * @public\n   * @method getName\n   * @returns {String}\n   */\n  getName() {\n    return this._name;\n  },\n\n\n  /**\n   * Returns registered child `App`s array\n   *\n   * @public\n   * @method getChildApps\n   * @returns {Array}\n   */\n  getChildApps() {\n    return _.clone(this._childApps);\n  },\n\n  /**\n   * Returns registered child `App`\n   *\n   * @public\n   * @method getChildApp\n   * @param {String} appName - Name of App to retrieve\n   * @returns {App}\n   */\n  getChildApp(appName) {\n    return this._childApps[appName];\n  },\n\n  /**\n   * Internal helper.  Unregisters child `App`\n   *\n   * @private\n   * @method _removeChildApp\n   * @param {String} appName - Name of App to unregister\n   * @returns {App}\n   */\n  _removeChildApp(appName) {\n    delete this._childApps[appName]._name;\n    delete this._childApps[appName];\n  },\n\n  /**\n   * Removes all childApps and returns them.\n   * The return is useful if any app is using `preventDestroy`\n   *\n   * @public\n   * @method removeChildApps\n   * @returns {Array}\n   */\n  removeChildApps() {\n    const childApps = this.getChildApps();\n\n    _.each(this._childApps, _.bind(function(childApp, appName) {\n      this.removeChildApp(appName);\n    }, this));\n\n    return childApps;\n  },\n\n  /**\n   * Destroys or removes registered child `App` by name\n   * depending on `preventDestroy`\n   *\n   * @public\n   * @method removeChildApp\n   * @param {String} appName - Name of App to destroy\n   * @param {Object} [options.preventDestroy] - Flag to remove but prevent App destroy\n   * @returns {App}\n   */\n  removeChildApp(appName, options) {\n    options = _.extend({}, options);\n\n    const childApp = this.getChildApp(appName);\n\n    if(!childApp) {\n      return;\n    }\n\n    // if preventDestroy simply unregister the child app\n    if(options.preventDestroy || _.result(childApp, 'preventDestroy')) {\n      this._removeChildApp(appName);\n    } else {\n      childApp.destroy();\n    }\n\n    return childApp;\n  }\n};\n","import _ from 'underscore';\nimport Marionette from 'backbone.marionette';\n\n /**\n * This provides methods used for registering events while App is running and cleans them up at `onStop`. It's not meant to\n * be used directly.\n *\n * @mixin\n */\n\nexport default {\n  /**\n   * Internal method to stop any registered events.\n   *\n   * @private\n   * @method _stopRunningEvents\n   */\n  _stopRunningEvents() {\n    _.each(this._runningEvents, _.bind(function(args) {\n      this.off.apply(this, args);\n    }, this));\n  },\n\n  /**\n   * Internal method to stop any registered listeners.\n   *\n   * @private\n   * @method _stopRunningListeners\n   */\n  _stopRunningListeners() {\n    _.each(this._runningListeningTo, _.bind(function(args) {\n      this.stopListening.apply(this, args);\n    }, this));\n  },\n\n  /**\n   * Overrides `Backbone.Event.on()`\n   * If this `App` is running it will register the event for removal `onStop`\n   *\n   * @public\n   * @method on\n   * @returns {EventListeners}\n   */\n  on() {\n    if(this._isRunning) {\n      this._runningEvents = (this._runningEvents || []);\n      this._runningEvents.push(arguments);\n    }\n\n    return Marionette.Object.prototype.on.apply(this, arguments);\n  },\n\n  /**\n   * Overrides `Backbone.Event.listenTo()`\n   * If this `App` is running it will register the listener for removal `onStop`\n   *\n   * @public\n   * @method listenTo\n   * @returns {EventListeners}\n   */\n  listenTo() {\n    if(this._isRunning) {\n      this._runningListeningTo = (this._runningListeningTo || []);\n      this._runningListeningTo.push(arguments);\n    }\n    return Marionette.Object.prototype.listenTo.apply(this, arguments);\n  },\n\n  /**\n   * Overrides `Backbone.Event.listenToOnce()`\n   * If this `App` is running it will register the listener for removal `onStop`\n   *\n   * @public\n   * @method listenToOnce\n   * @returns {EventListeners}\n   */\n  listenToOnce() {\n    if(this._isRunning) {\n      this._runningListeningTo = (this._runningListeningTo || []);\n      this._runningListeningTo.push(arguments);\n    }\n\n    return Marionette.Object.prototype.listenToOnce.apply(this, arguments);\n  }\n};\n","import _ from 'underscore';\nimport Marionette from 'backbone.marionette';\nimport StateMixin from './mixins/state';\nimport ChildAppsMixin from './mixins/child-apps';\nimport EventListenersMixin from './mixins/event-listeners';\n\nconst ClassOptions = [\n  'startWithParent',\n  'stopWithParent',\n  'startAfterInitialized',\n  'preventDestroy',\n  'StateModel',\n  'stateEvents'\n];\n\n/**\n * Marionette.Application with an `initialize` / `start` / `stop` / `destroy` lifecycle.\n *\n * @public\n * @class App\n * @memberOf Toolkit\n * @memberOf Marionette\n */\nconst App = Marionette.Application.extend({\n\n  /**\n   * Internal flag indiciate when `App` has started but has not yet stopped.\n   *\n   * @private\n   * @type {Boolean}\n   * @default false\n   */\n  _isRunning: false,\n\n  /**\n   * Set to true if a parent `App` should not be able to destroy this `App`.\n   *\n   * @type {Boolean|Function}\n   * @default false\n   */\n  preventDestroy: false,\n\n  /**\n   * Set to true if `App` should be started after it is initialized.\n   *\n   * @type {Boolean|Function}\n   * @default false\n   */\n  startAfterInitialized: false,\n\n  /**\n   * Set to true if `App` should be started after its parent starts.\n   *\n   * @type {Boolean|Function}\n   * @default false\n   */\n  startWithParent: false,\n\n  /**\n   * Set to false if `App` should not stop after its parent stops.\n   *\n   * @type {Boolean|Function}\n   * @default true\n   */\n  stopWithParent: true,\n\n  /**\n   * @public\n   * @constructs App\n   * @param {Object} [options] - Settings for the App.\n   * @param {Boolean} [options.startWithParent]\n   * @param {Boolean} [options.stopWithParent]\n   * @param {Boolean} [options.startAfterInitialized]\n   * @param {Boolean} [options.preventDestroy]\n   * @param {Object} [options.state] - Attributes to set on the state model.\n   */\n  constructor(options = {}) {\n    this.mergeOptions(options, ClassOptions);\n\n    this._initChildApps(options);\n\n    Marionette.Application.call(this, options);\n\n    if(_.result(this, 'startAfterInitialized')) {\n      this.start(options);\n    }\n  },\n\n  /**\n   * Internal helper to verify if `App` has been destroyed\n   *\n   * @private\n   * @method _ensureAppIsIntact\n   * @memberOf App\n   * @throws AppDestroyedError - Thrown if `App` has already been destroyed\n   */\n  _ensureAppIsIntact() {\n    if(this._isDestroyed) {\n      throw new Marionette.Error({\n        name: 'AppDestroyedError',\n        message: 'App has already been destroyed and cannot be used.'\n      });\n    }\n  },\n\n  /**\n   * Gets the value of internal `_isRunning` flag\n   *\n   * @public\n   * @method isRunning\n   * @memberOf App\n   * @returns {Boolean}\n   */\n  isRunning() {\n    return this._isRunning;\n  },\n\n  /**\n   * Gets the value of internal `_isRestarting` flag\n   *\n   * @public\n   * @method isRestarting\n   * @memberOf App\n   * @returns {Boolean}\n   */\n  isRestarting() {\n    return this._isRestarting;\n  },\n\n  /**\n   * Sets the app lifecycle to running.\n   *\n   * @public\n   * @method start\n   * @memberOf App\n   * @param {Object} [options] - Settings for the App passed through to events\n   * @event App#before:start - passes options\n   * @returns {App}\n   */\n  start(options = {}) {\n    this._ensureAppIsIntact();\n\n    if(this._isRunning) {\n      return this;\n    }\n\n    if(options.region) {\n      this.setRegion(options.region);\n    }\n\n    if(options.view) {\n      this.setView(options.view);\n    }\n\n    this._initState(options);\n\n    this.triggerMethod('before:start', options);\n\n    this._isRunning = true;\n\n    this.delegateStateEvents();\n\n    this.triggerStart(options);\n\n    return this;\n  },\n\n\n  /**\n   * Sets the app lifecycle to not running\n   * then sets the app lifecycle to running with ending state\n   *\n   * @public\n   * @method restart\n   * @memberOf App\n   * @returns {App}\n   */\n  restart() {\n    const state = this.getState().attributes;\n\n    this._isRestarting = true;\n    this.stop().start({ state });\n    this._isRestarting = false;\n\n    return this;\n  },\n\n  /**\n   * Triggers start event.\n   * Override to introduce async start\n   *\n   * @public\n   * @method triggerStart\n   * @memberOf App\n   * @param {Object} [options] - Settings for the App passed through to events\n   * @event App#start - passes options\n   * @returns\n   */\n  triggerStart(options) {\n    this.triggerMethod('start', options);\n  },\n\n  /**\n   * Sets the app lifecycle to not running.\n   * Removes any listeners added during the running state\n   *\n   * @public\n   * @method stop\n   * @memberOf App\n   * @param {Object} [options] - Settings for the App passed through to events\n   * @event App#before:stop - passes options\n   * @event App#stop - passes options\n   * @returns {App}\n   */\n  stop(options) {\n    if(!this._isRunning) {\n      return this;\n    }\n\n    this.triggerMethod('before:stop', options);\n\n    this._isRunning = false;\n\n    this.triggerMethod('stop', options);\n\n    // Running events are cleaned up after stop so that\n    // `stop` event handlers still fire\n    this._stopRunningListeners();\n    this._stopRunningEvents();\n\n    return this;\n  },\n\n  /**\n   * Stops the `App` and sets it destroyed.\n   *\n   * @public\n   * @method destroy\n   * @memberOf App\n   */\n  destroy() {\n    if(this._isDestroyed) {\n      return;\n    }\n\n    this.stop();\n\n    delete this._view;\n\n    Marionette.Object.prototype.destroy.apply(this, arguments);\n  },\n\n  /**\n   * Set the Application's Region\n   *\n   * @public\n   * @method setRegion\n   * @memberOf App\n   * @param {Region} [region] - Region to use with the app\n   * @returns {Region}\n   */\n  setRegion(region) {\n    this._region = region;\n\n    return region;\n  },\n\n  /**\n   * Get the Application's Region or\n   * Get a region from the Application's View\n   *\n   * @public\n   * @method getRegion\n   * @memberOf App\n   * @param {String} [regionName] - Optional regionName to get from the view\n   * @returns {Region}\n   */\n  getRegion(regionName) {\n    if(!regionName) {\n      return this._region;\n    }\n\n    return this.getView().getRegion(regionName);\n  },\n\n  /**\n   * Set the Application's View\n   *\n   * @public\n   * @method setView\n   * @memberOf App\n   * @param {View} [view] - View to use with the app\n   * @returns {View}\n   */\n  setView(view) {\n    this._view = view;\n\n    return view;\n  },\n\n  /**\n   * Get the Application's View\n   *\n   * @public\n   * @method getView\n   * @memberOf App\n   * @returns {View}\n   */\n  getView() {\n    const region = this.getRegion();\n\n    if(region && region.currentView) {\n      return region.currentView;\n    }\n\n    return this._view;\n  },\n\n  /**\n   * Shows a view in the Application's region\n   *\n   * @public\n   * @method showView\n   * @param {View} view - Child view instance defaults to App's view\n   * @param {...args} Additional args that get passed along\n   * @returns {View}\n   */\n  showView(view = this._view, ...args) {\n    this.getRegion().show(view, ...args);\n\n    return view;\n  },\n\n  /**\n   * Shows a view in the region of the app's view\n   *\n   * @public\n   * @method showChildView\n   * @param {String} regionName - Name of region to show in\n   * @param {View} view - Child view instance\n   * @param {...args} Additional args that get passed along\n   * @returns {View} - Child view instance\n   */\n  showChildView(regionName, view, ...args) {\n    this.getView().showChildView(regionName, view, ...args);\n\n    return view;\n  },\n\n  /**\n   * Returns view from the App view by region name.\n   *\n   * @public\n   * @method getChildView\n   * @param {String} regionName - Name of region to get view from\n   * @returns {View}\n   */\n  getChildView(regionName) {\n    return this.getView().getChildView(regionName);\n  }\n});\n\n_.extend(App.prototype, StateMixin, ChildAppsMixin, EventListenersMixin);\n\nexport default App;\n","import _ from 'underscore';\nimport Backbone from 'backbone';\nimport Marionette from 'backbone.marionette';\nimport StateMixin from './mixins/state';\n\nconst ClassOptions = [\n  'ViewClass',\n  'viewEventPrefix',\n  'viewOptions',\n  'region'\n];\n/**\n * Reusable Marionette.Object with View management boilerplate\n *\n * @public\n * @class Component\n * @memberOf Toolkit\n * @memberOf Marionette\n */\nconst Component = Marionette.Object.extend({\n\n  /**\n   * The view class to be managed.\n   * @type {Mn.View|Mn.CollectionView}\n   * @default Marionette.View\n   */\n  ViewClass: Marionette.View,\n\n  /**\n   * Used as the prefix for events forwarded from\n   * the component's view to the component\n   * @type {String}\n   * @default 'view'\n   */\n  viewEventPrefix: 'view',\n\n  /**\n   * Options hash passed to the view when built.\n   * @type {Object|Function}\n   * @default '{}'\n   */\n  viewOptions: {},\n\n  /**\n   * @public\n   * @constructs Component\n   * @param {Object} [options] - Settings for the component.\n   * @param {Object} [options.state] - Attributes to set on the state model.\n   * @param {Mn.View|Mn.CollectionView} [options.ViewClass]\n   * - The view class to be managed.\n   * @param {String} [options.viewEventPrefix]\n   * - Used as the prefix for events forwarded from the component's view to the component\n   * @param {Object} [options.viewOptions] - Options hash passed to an instantiated ViewClass.\n   * @param {Marionette.Region} [options.region] - The region to show the component in.\n   */\n  constructor(options = {}) {\n    // Make defaults available to this\n    this.mergeOptions(options, ClassOptions);\n\n    this._initState(options);\n\n    Marionette.Object.call(this, options);\n\n    this.delegateStateEvents();\n  },\n\n  /**\n   * Internal flag to determine if the component should destroy.\n   * Set to false while showing the component's view in the component's region.\n   *\n   * @private\n   * @type {Boolean}\n   * @default true\n   */\n  _shouldDestroy: true,\n\n  /**\n   * Set the Component's region and then show it.\n   *\n   * @public\n   * @method showIn\n   * @memberOf Component\n   * @param {Marionette.Region} region - The region for the component\n   * @param {Object} [viewOptions] - Options hash mixed into the instantiated ViewClass.\n   * @returns {Component}\n   */\n  showIn(region, viewOptions) {\n    this.region = region;\n\n    this.show(viewOptions);\n\n    return this;\n  },\n\n  /**\n   * Show the Component in its region.\n   *\n   * @public\n   * @event Component#before:show\n   * @event Component#show\n   * @throws ComponentShowError - Thrown if component has already been show.\n   * @throws ComponentRegionError - Thrown if component has no defined region.\n   * @method show\n   * @param {Object} [viewOptions] - Options hash mixed into the instantiated ViewClass.\n   * @memberOf Component\n   * @returns {Component}\n   */\n  show(viewOptions) {\n    const region = this.getRegion();\n\n    if(this._isShown) {\n      throw new Marionette.Error({\n        name: 'ComponentShowError',\n        message: 'Component has already been shown in a region.'\n      });\n    }\n\n    if(!region) {\n      throw new Marionette.Error({\n        name: 'ComponentRegionError',\n        message: 'Component has no defined region.'\n      });\n    }\n\n    this.triggerMethod('before:show');\n\n    this.renderView(viewOptions);\n    this._isShown = true;\n\n    this.triggerMethod('show');\n\n    // Destroy the component if the region is emptied because\n    // it destroys the view\n    this.listenTo(region, 'empty', this._destroy);\n\n    return this;\n  },\n\n  /**\n   * Returns component region.\n   *\n   * @public\n   * @method getRegion\n   * @memberOf Component\n   * @returns Component region\n   */\n  getRegion() {\n    return this.region;\n  },\n\n  /**\n   * Get the Component ViewClass class.\n   * Checks if the `ViewClass` is a view class (the common case)\n   * Then check if it's a function (which we assume that returns a view class)\n   *\n   * @private\n   * @method _getViewClass\n   * @memberOf Component\n   * @param {Object} [options] - Options that can be used to determine the ViewClass.\n   * @returns {View}\n   */\n  _getViewClass(options = {}) {\n    const ViewClass = this.ViewClass;\n\n    if(ViewClass.prototype instanceof Backbone.View || ViewClass === Backbone.View) {\n      return ViewClass;\n    } else if(_.isFunction(ViewClass)) {\n      return ViewClass.call(this, options);\n    }\n\n    throw new Marionette.Error({\n      name: 'InvalidViewClassError',\n      message: '\"ViewClass\" must be a view class or a function that returns a view class'\n    });\n  },\n\n  /**\n   * Shows or re-shows a newly built view in the component's region\n   *\n   * @public\n   * @event Component#before:render:view\n   * @event Component#render:view\n   * @method renderView\n   * @memberOf Component\n   * @param {Object} [options] - Options hash mixed into the instantiated ViewClass.\n   * @returns {Component}\n   */\n  renderView(options) {\n    const ViewClass = this._getViewClass(options);\n\n    const viewOptions = this.mixinOptions(options);\n\n    const view = this.buildView(ViewClass, viewOptions);\n\n    // Attach current built view to component\n    this.currentView = view;\n\n    this._proxyViewEvents(view);\n\n    this.triggerMethod('before:render:view', view);\n\n    // _shouldDestroy is flag that prevents the Component from being\n    // destroyed if the region is emptied by Component itself.\n    this._shouldDestroy = false;\n\n    // Show the view in the region\n    this.getRegion().show(view);\n\n    this._shouldDestroy = true;\n\n    this.triggerMethod('render:view', view);\n\n    return this;\n  },\n\n  /**\n   * Proxies the ViewClass's viewEvents to the Component itself\n   * Similar to CollectionView childEvents\n   * (http://marionettejs.com/docs/v2.3.2/marionette.collectionview.html#collectionviews-childevents)\n   *\n   * @private\n   * @method _proxyViewEvents\n   * @memberOf Component\n   * @param {Mn.View|Mn.CollectionView} view -\n   * The instantiated ViewClass.\n   */\n  _proxyViewEvents(view) {\n    const prefix = this.viewEventPrefix;\n\n    view.on('all', function() {\n      const args = _.toArray(arguments);\n      const rootEvent = args[0];\n\n      args[0] = `${ prefix }:${ rootEvent }`;\n      args.splice(1, 0, view);\n\n      this.triggerMethod.apply(this, args);\n    }, this);\n  },\n\n  /**\n   * Mixin initial State with any other viewOptions\n   *\n   * @public\n   * @abstract\n   * @method mixinOptions\n   * @memberOf Component\n   * @param {Object} [options] - Additional options to mixin\n   * @returns {Object}\n   */\n  mixinOptions(options) {\n    const viewOptions = _.result(this, 'viewOptions');\n\n    return _.extend({ state: this.getState().attributes }, viewOptions, options);\n  },\n\n  /**\n   * Builds the view class with options\n   * If you need a dynamic ViewClass override this function\n   *\n   * @public\n   * @abstract\n   * @method buildView\n   * @memberOf Component\n   * @param {Mn.View|Mn.CollectionView} ViewClass -\n   * The view class to instantiate.\n   * @param {Object} [viewOptions] - Options to pass to the View\n   * @returns {Mn.View|Mn.CollectionView}\n   */\n  buildView(ViewClass, viewOptions) {\n    return new ViewClass(viewOptions);\n  },\n\n  /**\n   * Destroys Component.\n   *\n   * @private\n   * @method _destroy\n   * @memberOf Component\n   */\n  _destroy() {\n    if(this._shouldDestroy) {\n      Marionette.Object.prototype.destroy.apply(this, arguments);\n    }\n  },\n\n  /**\n   * Empties component's region.\n   *\n   * @private\n   * @method _emptyRegion\n   * @param {Object} [options] - Options passed to `region.empty`\n   * @memberOf Component\n   */\n  _emptyRegion(options) {\n    const region = this.getRegion();\n\n    if(region) {\n      this.stopListening(region, 'empty');\n      region.empty(options);\n    }\n  },\n\n  /**\n   * Empty the region and destroy the component.\n   *\n   * @public\n   * @method destroy\n   * @param {Object} [options] - Options passed to `_emptyRegion` and `destroy`\n   * @memberOf Component\n   */\n  destroy(options) {\n    this._emptyRegion(options);\n\n    this._shouldDestroy = true;\n\n    this._destroy(options);\n  }\n});\n\n_.extend(Component.prototype, StateMixin);\n\nexport default Component;\n","import _ from 'underscore';\nimport Marionette from 'backbone.marionette';\n\nimport StateMixin from './mixins/state';\nimport App from './app';\nimport Component from './component';\n\n/**\n * @module Toolkit\n */\n\nconst previousToolkit = Marionette.Toolkit;\n\nconst Toolkit = Marionette.Toolkit = {};\n\nToolkit.noConflict = function() {\n  Marionette.Toolkit = previousToolkit;\n  return this;\n};\n\nToolkit.MixinState = function(classDefinition) {\n  let _StateMixin = StateMixin;\n\n  if(classDefinition.prototype.StateModel) {\n    _StateMixin = _.omit(StateMixin, 'StateModel');\n  }\n\n  _.extend(classDefinition.prototype, _StateMixin);\n};\n\nToolkit.VERSION = '<%VERSION%>';\n\nToolkit.StateMixin = StateMixin;\n\nToolkit.App = App;\n\nToolkit.Component = Component;\n\nexport default Toolkit;\n"],"sourceRoot":"/source/"}